list = {}
focus = nil
active = nil
compositor = {}
nullRedirect = framebuffer.new()
eventHooks = {}

local function tablify(baseTable, keyTable)
	if #keyTable > 1 then
		local key = table.remove(keyTable, 1)
		if not baseTable[key] then
			baseTable[key] = {__hooks = {}}
		elseif type(baseTable[key]) ~= "table" then
			return false
		end
		return tablify(baseTable[key], keyTable)
	elseif #keyTable == 1 then
		if not baseTable[keyTable[1]] then
			baseTable[keyTable[1]] = {__hooks = {}}
		end
		return baseTable, keyTable[1]
	end
end

local directedEvents = {}

function getNextDirectedEvent()
	local proc,event
	if #directedEvents>0 then
		proc,event=unpack(table.remove(directedEvents,1))
	end
	return proc,event
end

function directedEventsWaiting()
	return #directedEvents>0
end

local function changeHookActual(hookMask, val, add)
	local ref, key = tablify(process.eventHooks, hookMask)
	if add then
		ref[key].__hooks[val] = val
	else
		ref[key].__hooks[val] = nil
	end
end

function addHook(hookMask)
	return changeHookActual(hookMask, process.id(), true)
end

function removeHook(hookMask)
	return changeHookActual(hookMask, process.id(), false)
end

function setFocus(num)
	focusWindow = num
end

function id()
	if process.active and process.list[process.active] then
		return process.active
	else
		return nil, "No active process!"
	end
end

function this()
	if process.id() and process.list[process.id()] then
		return process.list[process.id()]
	else
		return nil, "No active process!"
	end
end

function next()
	for  i = #process.list, 1, -1 do
		if process.list[i] then
			return i
		end
	end
end

function getFromPath(path)
	for pID, proc in ipairs(process.list) do
		if proc and proc.path == path then
			return proc
		end
	end
end

function getFromName(name)
	for pID, proc in ipairs(process.list) do
		if proc and proc.name == name then
			return proc
		end
	end
end

local Process = {
	resume = function(self, event)
		--evaluate whether this event should even go to this process.
		if self.listening then
			local resumeProcess = false
			for i=1, #self.listening do
				if event[1] == self.listening[i] then
					resumeProcess = true
					self.listening = nil
					break
				end
			end
			if not resumeProcess then return unpack(event) end
		end

		--redirect to window's current position in its redirect stack
		local _old = term.redirect(self.redirect)

		local active = process.active
		process.active = self.id
		passback = {coroutine.resume(self.thread, unpack(event))}
		for _, win in ipairs(self.windows) do
			win:draw()
		end
		process.compositor:draw()
		process.active = active

		self.redirect = term.current()

		term.redirect(_old)

		--handle filters being sent back in passback.
		if passback[1] and passback[2] then
			if type(passback[2]) == "string" then
				self.listening = {passback[2]}
			elseif type(passback[2]) == "table" then
				self.listening = passback[2]
			end
		end

		--former checkProcess function.
		if not self:check() then
			local proc = process.getFromName("lws")
			if proc then
				proc:queue("close_window", self.id)
			else
				self:kill()
			end
		end
		return unpack(passback, 2)
	end,
	check = function(self)
		if coroutine.status(self.thread) == "dead" then
			return false
		else
			for i = 1, #self.windows do
				if self.windows[i].mode == "ephemeral" and (i < #self.windows or self.id ~= process.focus) then
					--kill the individual window
					local proc = process.getFromName("lws")
					if proc then
						proc:resume({"close_window", self.id, self.windows[i]})
					else
						error("no lws", 2)
					end
				end
			end
		end
		return true
	end,
	queue = function(self, ...)
		--table.insert(self.eventQueue, {...})
		table.insert(directedEvents,{self,{...}})
		return true
	end,
	kill = function(self)
		if self.windows then
			for _, win in ipairs(self.windows) do
				if win.destroy then
					win:destroy()
				end
			end
		end
		self:remove()
		return true
	end,
	remove = function(self)
		process.list[self.id] = false
		if self.id == process.focus then
			process.focus = process.next()
			if process.focus then
				process.list[process.focus]:toFront()
			end
		end
	end,
	addWindow = function(self, win)
		local newWindow = true
		for i = 1, #self.windows do
			if self.windows[i] == win then
				newWindow = false
				break
			end
		end
		if newWindow then
			table.insert(self.windows, win)
		end
	end,
	removeWindow = function(self, win)
		local winFound = false
		for i = 1, #self.windows do
			if self.windows[i] == win then
				table.remove(self.windows, i)
				winFound = true
				break
			end
		end
		if winFound then
			win:destroy()
		end
	end,
	toFront = function(self, win)
		--win is optional, if not specified will maintain order of windows.
		if win then
			for i = 1, #self.windows do
				if self.windows[i] == win then
					table.insert(self.windows, table.remove(self.windows, i))
					break
				end
			end
		end
		for i = 1, #self.windows do
			for j = 1, #process.compositor.bufferStack do
				if process.compositor.bufferStack[j] == self.windows[i].target.buffer then
					process.compositor:toFront(j)
					break
				end
			end
		end
	end,
	toBack = function(self, win)
		--win is optional, will move that window to behind the rest of them, as well as moving the whole set to the bottom of the stack.
		if #self.windows >= 1 then
			if win then
				for i = 1, #self.windows do
					if self.windows[i] == win then
						table.insert(self.windows, 1, table.remove(self.windows, i))
						break
					end
				end
			end

			local intermediate = {}

			for i = 1, #self.windows do
				for j = 1, #process.compositor.bufferStack do
					if self.windows[i].target.buffer == process.compositor.bufferStack[j] then
						table.insert(intermediate, table.remove(process.compositor.bufferStack, j))
						break
					end
				end
			end

			repeat
				table.insert(process.compositor.bufferStack, 2, table.remove(intermediate))
			until #intermediate == 0
		end

		process.focus = process.next()
		if process.list[process.focus] then
			process.list[process.focus]:toFront()
		end
	end,
}

local pmeta = {__index = Process}

function new(func, path, win, redirect)
	local proc = {
		thread = coroutine.create(func),
		path = path,
		name = fs.getName(path),
		windows = {},
	}

	table.insert(process.list, proc)
	proc.id = #process.list

	if win then
		table.insert(proc.windows, win)
		proc.redirect = win.redirect
		process.focus = #process.list
	elseif redirect then
		proc.redirect = redirect
	else
		proc.redirect = process.nullRedirect
	end

	setmetatable(proc, pmeta)

	proc:resume({})
	return proc
end